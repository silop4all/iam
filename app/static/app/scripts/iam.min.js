var IAM = IAM || function () { var e = null, r = null, a = "iam-invalid-field", t = { validatorClass: "iam-invalid-field", highlightClass: "has-error", color: "#bd3232" }; return $.validator.addMethod("username", function (e, r) { return this.optional(r) || /^[a-z0-9]+$/i.test(e) }), $.validator.addMethod("notEqualTo", function (e, r, a) { return this.optional(r) || e !== $(a).val() }), $.validator.addMethod("vat", function (e, r) { return this.optional(r) || /^[a-zA-Z0-9]+$/i.test(e) }), $.validator.addMethod("password", function (e, r) { return this.optional(r) || /^[a-zA-Z0-9@#_&$]+$/i.test(e) }), $.validator.addMethod("question", function (e, r) { var a = $("span#literal").text().split("+"), t = parseInt(a[0]) + parseInt(a[1]); return this.optional(r) || parseInt(e) === parseInt(t) }), $.fn.serializeObject = function () { var e = {}, r = this.serializeArray(); return $.each(r, function () { "" !== this.value && (void 0 !== e[this.name] ? (e[this.name].push || (e[this.name] = [e[this.name]]), e[this.name].push(this.value || "")) : e[this.name] = this.value || "") }), e }, $.fn.serializeObjectAll = function () { var e = {}, r = this.serializeArray(); return $.each(r, function () { void 0 !== e[this.name] ? (e[this.name].push || (e[this.name] = [e[this.name]]), e[this.name].push(this.value || "")) : e[this.name] = this.value || "" }), e }, $.fn.serializeList = function () { var e = [], r = this.serializeArray(); return $.each(r, function () { isNaN(this.name) || e.push(parseInt(this.name)) }), e }, $.fn.handleRoles = function () { this.find("input").is(":checked") ? (this.find("input").val(!0), this.addClass("active").css("border", "1px solid white !important")) : (this.find("input").val(!1), this.removeClass("active").css("border", "1px solid #dddddd")) }, $.fn.sweetAlertText = function () { this.css("line-height", "inherit"), this.css("text-align", "justify") }, $("#view-password").click(function () { $(this).is(":checked") ? $("#userpassword").attr("type", "text") : $("#userpassword").attr("type", "password") }), $("#view-old-password").click(function () { $(this).is(":checked") ? $("#currentpassword").attr("type", "text") : $("#currentpassword").attr("type", "password") }), $("#username").focus(function () { var e = $("#name").val(), r = $("#surname").val(); if (e && r && !this.value) { var a = e[0] + r.substring(0, r.length > 8 ? 8 : r.length); this.value = a.toLowerCase() } }), $("#registry-reset").click(function () { r.resetForm(), $("." + a).parent().removeClass("has-error"), $("span." + a).remove() }), $("#register-app-reset").click(function () { r.resetForm(), $("." + a).parent().removeClass("has-error"), $("span." + a).remove() }), $("#form-reset").click(function () { r.resetForm(), $("." + a).parent().removeClass("has-error"), $("span." + a).remove() }), { login: function (r) { e = "#loginForm", $(document).on("submit", e, function (e) { e.preventDefault() }), loginValidator = $(e).validate({ errorClass: t.validatorClass, errorElement: "span", rules: { username: { required: !0, minlength: 4, username: !0 }, password: { required: !0, minlength: 8, password: !0 } }, messages: { username: { required: "Please enter your username", username: "Please enter only lower characters a-z, digits 0-9 without spaces" }, password: { required: "Please enter your password", password: "Please include characters, digits and the special characters @#_&$ without spaces" } }, errorPlacement: function (e, r) { e.insertAfter(r), e.css("color", t.color), r.parent().addClass(t.highlightClass) }, success: function (e) { e.parent().removeClass(t.highlightClass), e.removeClass(a), e.parent().find($("span")).remove() }, submitHandler: function (e) { var a = $(e).serializeObject(); $.ajax({ url: $(e).attr("action"), type: "POST", dataType: "json", headers: { "Content-Type": "application/json" }, data: JSON.stringify(a), success: function (e) { location.href = r }, error: function (e, r, a) { var s = '<label><span class="glyphicon glyphicon-remove-circle"></span> Invalid credentials. Try again</label>'; $("#invalid-credentials").css("color", "white").css("background", t.color).css("border-radius", "4px 4px"), $("#invalid-credentials").html(s) } }) } }) }, authorize: function (r, s) { e = "#authForm", $(document).on("submit", e, function (e) { e.preventDefault() }), authValidator = $(e).validate({ errorClass: t.validatorClass, errorElement: "span", rules: { username: { required: !0, minlength: 4, username: !0 }, password: { required: !0, minlength: 8, password: !0 } }, messages: { username: { required: "Please enter your username", username: "Please enter only lower characters a-z, digits 0-9 without spaces" }, password: { required: "Please enter your password", password: "Please include characters, digits and the special characters @#_&$ without spaces" } }, errorPlacement: function (e, r) { e.insertAfter(r), e.css("color", t.color), r.parent().addClass(t.highlightClass) }, success: function (e) { e.parent().removeClass(t.highlightClass), e.removeClass(a), e.parent().find($("span")).remove() }, submitHandler: function (e) { var a = $(e).serializeObject(); a.client_id = r, a.redirect_uri = s, $.ajax({ url: $(e).attr("action"), type: $(e).attr("method"), dataType: "json", headers: { "Content-Type": "application/json" }, data: JSON.stringify(a), success: function (e) { console.log(e), location.href = e.link }, error: function (e, r, a) { var s = '<label><span class="glyphicon glyphicon-remove-circle"></span> Invalid credentials. Try again</label>'; $("#invalid-credentials").css("color", "white").css("background", t.color).css("border-radius", "4px 4px"), $("#invalid-credentials").html(s) } }) } }) }, preRegister: function (r, s) { e = "#preRegistrationForm", $(document).on("submit", e, function (e) { e.preventDefault() }), preRegValidator = $(e).validate({ errorClass: a, errorElement: "span", rules: { mail: { required: !0, email: !0, remote: { url: s, type: "GET", data: { mail: function () { return $("#mail").val() } } } } }, messages: { mail: { required: "Please enter your email address", remote: "The email is already taken.", email: "Your email address must be in the format of name@domain.org" } }, errorPlacement: function (e, r) { e.insertAfter(r), e.css("color", t.color), r.parent().addClass(t.highlightClass) }, success: function (e) { e.parent().removeClass(t.highlightClass), e.removeClass(a), e.parent().find($("span")).remove() }, submitHandler: function (e) { var a = $(e).serializeObject(); $.ajax({ url: $(e).attr("action"), type: "POST", dataType: "json", contentType: "application/json", data: JSON.stringify(a), success: function (e) { console.log(e), location.href = r }, error: function (e) { alert("Oops, an error is occured!!!") } }) } }) }, register: function (r, s) { e = "#registrationForm", $(document).on("submit", e, function (e) { e.preventDefault() }), regValidator = $(e).validate({ errorClass: a, errorElement: "span", rules: { name: { required: !0, minlength: 2 }, surname: { required: !0, minlength: 2 }, username: { required: !0, minlength: 4, username: !0, remote: { url: s, type: "GET", data: { username: function () { return $("#username").val() } } } }, mail: { required: !0, email: !0, remote: { url: s, type: "GET", data: { mail: function () { return $("#mail").val() } } } }, userpassword: { required: !0, minlength: 8, password: !0 }, password_confirm: { required: !0, minlength: 8, equalTo: "#userpassword", password: !0 }, skills: { required: !0 }, phone: { required: !1, minlength: 14, maxlength: 15, digits: !0 }, vat: { required: !1, vat: !0, minlength: 6 }, city: { required: !1, minlength: 2 }, address: { required: !1, minlength: 2 }, postcode: { required: !1, minlength: 3, maxlength: 10 }, question: { required: !0, minlength: 1, maxlength: 2, question: !0 } }, messages: { name: { required: "Please enter your firstname" }, surname: { required: "Please enter your lastname" }, username: { required: "Please enter your username", remote: "The username is already taken.", username: "Please enter only lower characters a-z, digits 0-9 without spaces" }, mail: { required: "Please enter your email address", remote: "The email is already taken.", email: "Your email address must be in the format of name@domain.org" }, userpassword: { required: "Please enter your password", password: "Please include characters, digits and the special characters @#_&$ without spaces" }, password_confirm: { required: "Please confirm your password", equalTo: "Please enter the same password in the related fields" }, vat: { vat: "Please enter only characters a-z/A-Z, digits 0-9 without spaces" }, question: { required: "Please enter your thought", question: "Please confirm the result" } }, errorPlacement: function (e, r) { e.insertAfter(r), e.css("color", t.color), r.parent().addClass(t.highlightClass) }, success: function (e) { e.parent().removeClass(t.highlightClass), e.removeClass(a), e.parent().find($("span")).remove() }, submitHandler: function (e) { var a = $(e).serializeObject(); delete a.question, delete a.password_confirm, $.ajax({ url: $(e).attr("action"), type: "POST", dataType: "json", contentType: "application/json", data: JSON.stringify(a), success: function (e) { location.href = r }, error: function (e) { alert("Oops, an error is occured!!!") } }) } }) }, updateProfile: function (r, s) { e = "#profileEditForm", $(document).on("submit", e, function (e) { e.preventDefault() }), profileUpdValidator = $(e).validate({ errorClass: a, errorElement: "span", rules: { name: { required: !0, minlength: 2 }, surname: { required: !0, minlength: 2 }, mail: { required: !0, email: !0 }, skills: { required: !0 }, phone: { required: !1, minlength: 14, maxlength: 15, digits: !0 }, city: { required: !1, minlength: 2 }, address: { required: !1, minlength: 2 }, postcode: { required: !1, minlength: 3, maxlength: 10 }, vat: { required: !1, vat: !0, minlength: 6 } }, messages: { name: { required: "Please enter your firstname" }, surname: { required: "Please enter your lastname" }, mail: { required: "Please enter your email address", remote: "The email is already taken.", email: "Your email address must be in the format of name@domain.org" }, vat: { vat: "Please enter only characters a-z/A-Z, digits 0-9 without spaces" } }, errorPlacement: function (e, r) { e.insertAfter(r), e.css("color", t.color), r.parent().addClass(t.highlightClass) }, success: function (e) { e.parent().removeClass(t.highlightClass), e.removeClass(a), e.parent().find($("span")).remove() }, submitHandler: function (e) { var a = $(e).serializeObjectAll(); console.log(a), $.ajax({ url: $(e).attr("action"), type: $(e).attr("method"), dataType: "json", contentType: "application/json", data: JSON.stringify(a), success: function (e) { location.href = r }, error: function (e) { alert("Oops, an error is occured!!!") } }) } }) }, changePassword: function (s) { e = "#changePwdForm", $(document).on("submit", e, function (e) { e.preventDefault() }), r = $(e).validate({ errorClass: a, errorElement: "span", rules: { currentpassword: { required: !0, minlength: 8, password: !0 }, userpassword: { required: !0, minlength: 8, notEqualTo: "#currentpassword", password: !0 }, password_confirm: { required: !0, minlength: 8, equalTo: "#userpassword", password: !0 } }, messages: { userpassword: { required: "Please enter your old password", password: "Please include characters, digits and the special characters @#_&$ without spaces" }, userpassword: { required: "Please enter your new password", notEqualTo: "Please enter a different password from the old one", password: "Please include characters, digits and the special characters @#_&$ without spaces" }, password_confirm: { required: "Please confirm your new password", equalTo: "Please enter the same password in the related fields" } }, errorPlacement: function (e, r) { e.insertAfter(r), e.css("color", t.color), r.parent().addClass(t.highlightClass) }, success: function (e) { e.parent().removeClass(t.highlightClass), e.removeClass(a), e.parent().find($("span")).remove() }, submitHandler: function (e) { var r = $(e).serializeObject(); $.ajax({ url: $(e).attr("action"), type: $(e).attr("method"), dataType: "json", contentType: "application/json", data: JSON.stringify(r), success: function (e) { swal({ html: !1, title: "Change password process", text: "Your password has been changed.", type: "info", confirmButtonText: "Continue", confirmButtonColor: "#3a87ad", animation: "slide-from-top" }, function (e) { e && (location.href = s) }) }, error: function (e) { console.log(e.responseText), swal({ html: !1, title: "Change password process", text: "The old password you enter is not valid. Try again!", type: "error", confirmButtonText: "Continue", confirmButtonColor: "#d9534f", animation: "slide-from-top" }) } }) } }) }, registerApp: function (s) { e = "#registrationAppForm", $(document).on("submit", e, function (e) { e.preventDefault() }), r = $(e).validate({ errorClass: a, errorElement: "span", rules: { name: { required: !0, minlength: 4 }, description: { required: !0, maxlength: 200 }, logo: { required: !1, accept: "image/jpg,image/jpeg,image/png,image/gif" }, url: { required: !0, url: !0 }, callback_url: { required: !0, url: !0 }, callback_url2: { required: !1, url: !0 }, mail: { required: !0, email: !0 } }, messages: { name: { required: "Please enter the name of the application" }, description: { required: "Please enter a brief description of the application", maxlength: "Please type at most 500 characters" }, logo: { required: "Please upload a logo for the application", accept: "Please upload an logo having jpg, jpeg, png or gif format" }, url: { required: "Please enter the URL of the application", url: "Please enter a valid callback URL" }, callback_url: { required: "Please enter the callback URL of the application", url: "Please enter a valid callback URL" }, callback_url2: { url: "Please enter a valid callback URL" }, mail: { required: "Please enter the email address of the application's administrator", email: "The email address must be in the format of name@domain.org" } }, errorPlacement: function (e, r) { e.insertAfter(r), e.css("color", t.color), r.parent().addClass(t.highlightClass) }, success: function (e) { e.parent().removeClass(t.highlightClass), e.removeClass(a), e.parent().find($("span")).remove() }, submitHandler: function (e) { var r = $(e).serializeObject(); delete r.logo, $.ajax({ url: $(e).attr("action"), type: $(e).attr("method"), dataType: "json", contentType: "application/json", data: JSON.stringify(r), success: function (e) { location.href = "/applications/" + e.client_id + "/" }, error: function (e) { alert("Oops, an error is occured!!!") } }) } }) }, updateApp: function (s) { e = "#updateAppForm", $(document).on("submit", e, function (e) { e.preventDefault() }), r = $(e).validate({ errorClass: a, errorElement: "span", rules: { name: { required: !0, minlength: 4 }, description: { required: !0, maxlength: 200 }, logo: { required: !1, accept: "image/jpg,image/jpeg,image/png,image/gif" }, url: { required: !0, url: !0 }, callback_url: { required: !0, url: !0 }, callback_url2: { required: !1, url: !0 }, mail: { required: !0, email: !0 } }, messages: { name: { required: "Please enter the name of the application" }, description: { required: "Please enter a brief description of the application", maxlength: "Please type at most 500 characters" }, logo: { required: "Please upload a logo for the application", accept: "Please upload an logo having jpg, jpeg, png or gif format" }, url: { required: "Please enter the URL of the application", url: "Please enter a valid callback URL" }, callback_url: { required: "Please enter the callback URL of the application", url: "Please enter a valid callback URL" }, callback_url2: { url: "Please enter a valid callback URL" }, mail: { required: "Please enter the email address of the application's administrator", email: "The email address must be in the format of name@domain.org" } }, errorPlacement: function (e, r) { e.insertAfter(r), e.css("color", t.color), r.parent().addClass(t.highlightClass) }, success: function (e) { e.parent().removeClass(t.highlightClass), e.removeClass(a), e.parent().find($("span")).remove() }, submitHandler: function (e) { var r = $(e).serializeObject(); console.info(r), alert("To be done") } }) }, deleteApp: function (e, r) { swal({ html: !1, title: "Application removal", text: "Do you want to delete this application?", type: "info", showCancelButton: !0, confirmButtonClass: "btn-primary", confirmButtonText: "Yes", cancelButtonText: "No", cancelButtonClass: "btn-danger", closeOnConfirm: !1, closeOnCancel: !1, animation: "slide-from-top" }, function (a) { a ? $.ajax({ url: e, type: "DELETE", dataType: "json", contentType: "application/json", success: function (e) { console.log(e), location.href = r }, error: function (e) { console.error("Error in app deletion") } }) : swal({ html: !1, title: "Application removal", text: "The deletion of this application has been canceled!", type: "info", confirmButtonText: "Continue", confirmButtonColor: "#3a87ad" }) }) }, authenticatedApps: function (e) { $.ajax({ url: e, type: "GET", dataType: "json", contentType: "application/json", success: function (r) { var a = r.result; for (var t in a) a[t].id = a[t].id[0], a[t].revoke_access = "<span data-href='" + e + "' data-id='" + a[t].id + "' class='fa fa-remove text-danger cursor-pointer revoke-token'><span>", console.log(a[t].revoke_access); $("#authorized_apps").bootstrapTable("destroy").bootstrapTable({ data: a }), $(".revoke-token").click(function () { $.ajax({ url: $(this).data("href") + "/" + $(this).data("id"), type: "DELETE", dataType: "json", contentType: "application/json", success: function (e) { console.info("DELETE token: " + $(this).data("id")) }, error: function (e) { console.error(e) }, complete: function (e) { location.reload() } }) }) }, error: function (e) { alert("Oops, an error is occured!!!") } }) }, myApplications: function (e, r) { $.ajax({ url: e, type: "GET", dataType: "json", contentType: "application/json", success: function (e) { var a = e.results; for (var t in a) a[t].preview = "<a href='" + r + a[t].client_id + "/' class='text-info cursor-pointer app-preview'><span class='fa fa-eye text-primary'><span> </a>", a[t].edit = "<a href='" + r + a[t].client_id + "/edit/' class='text-info cursor-pointer app-edit'><span class='fa fa-edit text-primary'><span> </a>", a[t].roles = "<a href='" + r + a[t].client_id + "/roles/' class='cursor-pointer app-roles'><span class='fa fa-key text-primary'><span> </a>", a[t].users = "<a href='" + r + a[t].client_id + "/authorized-members/' class='cursor-pointer app-auth-users'><span class='fa fa-group text-primary'><span> </a>"; $("#my_apps").bootstrapTable("destroy").bootstrapTable({ data: a }) }, error: function (e) { console.error("Error in apps loading"), $("#my_apps").bootstrapTable("destroy").bootstrapTable({ data: [] }) }, complete: function () { $(".fixed-table-body").css("height", "auto") } }), $("body").on("all.bs.table", "#my_apps", function (e, r) { $("td").each(function () { $(this).css("vertical-align", "middle") }) }) }, setApplicationRoles: function () { e = "#setRolesForm", r = $(e).validate({ submitHandler: function (e) { var r = $(e).serializeList(); $.ajax({ url: $(e).attr("action"), type: $(e).attr("method"), dataType: "json", contentType: "application/json", data: JSON.stringify(r), success: function (e) { location.reload() }, error: function (e) { console.error("Error in roles' selection") } }) } }), $(document).on("submit", e, function (e) { e.preventDefault() }).on("click", ".list-group-item", function () { $(this).handleRoles() }).on("click", "#set-roles-reset", function (r) { r.preventDefault(), $(e)[0].reset(), $.each($(".list-group-item"), function () { $(this).handleRoles() }) }) }, memberApplicationRoles: function () { e = "#memberRolesForm", r = $(e).validate({ errorClass: a, errorElement: "div", rules: { terms_usage: { required: !0 } }, messages: { terms_usage: { required: "Please read the <strong>Terms of usage</strong> and then check on the box" } }, errorPlacement: function (e, r) { e.insertAfter(r), e.css("color", t.color), r.parent().addClass(t.highlightClass) }, success: function (e) { e.parent().removeClass(t.highlightClass), e.removeClass(a), e.parent().find($("span")).remove() }, submitHandler: function (e) { var r = $(e).serializeList(); $.ajax({ url: $(e).attr("action"), type: $(e).attr("method"), dataType: "json", contentType: "application/json", data: JSON.stringify(r), success: function (e) { location.reload() }, error: function (e) { console.error("Error in roles' selection") } }) } }), $(document).on("submit", e, function (e) { e.preventDefault() }).on("click", ".list-group-item", function () { $(this).handleRoles() }).on("click", "#reset-member-roles", function (r) { r.preventDefault(), $(e)[0].reset(), $.each($(".list-group-item"), function () { $(this).handleRoles() }) }).on("click", "#use_agreement", function (e) { e.preventDefault(), swal({ html: !0, title: "Terms of usage", text: "By checking this box, you grant with permission the P4ALL IAM (security) infrastructure to share your declared role(s) with the target (integrated) application.", type: "info", animation: "slide-from-top", confirmButtonText: "Continue", confirmButtonColor: "#3a87ad" }), $(".sweet-alert p").sweetAlertText() }) } } }();